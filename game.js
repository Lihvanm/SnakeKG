const canvas = document.getElementById("gameCanvas");
const ctx = canvas.getContext("2d");

// –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–≥—Ä—ã
const gridSize = 71; // –†–∞–∑–º–µ—Ä —è—á–µ–π–∫–∏ (71 –ø–∏–∫—Å–µ–ª—å)
const colors = ["red", "green", "blue", "yellow"]; // –¶–≤–µ—Ç–∞ —Ñ—Ä–∞–≥–º–µ–Ω—Ç–æ–≤ –∑–º–µ–∏
let snake = [];
let player = { x: canvas.width / 2, y: canvas.height / 2 }; // –ò–≥—Ä–æ–∫ –≤ —Ü–µ–Ω—Ç—Ä–µ
let bullets = [];
let score = 0;
let highScore = 0;
let isGameOver = false;
let isLoggedIn = false;

// –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤—ã—Å—Ç—Ä–µ–ª–æ–º
let isAiming = false; // –§–ª–∞–≥ –¥–ª—è –Ω–∞–≤–µ–¥–µ–Ω–∏—è —Ü–µ–ª–∏
let aimDirection = { x: 0, y: 0 }; // –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–∏—Ü–µ–ª–∏–≤–∞–Ω–∏—è
let currentBulletColor = "red"; // –¶–≤–µ—Ç —Å–Ω–∞—Ä—è–¥–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é

// Telegram Bot API
const TELEGRAM_BOT_TOKEN = "7763147422:AAGPWCetxPUsAuhvCknqVFrZId_r0BPSEhE"; // –¢–æ–∫–µ–Ω –≤–∞—à–µ–≥–æ –±–æ—Ç–∞
const TELEGRAM_CHAT_ID = "-1002382138419"; // ID –≥—Ä—É–ø–ø—ã Snake_KG

// –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
document.getElementById("loginButton").addEventListener("click", handleLogin);
document.getElementById("nicknameInput").addEventListener("keydown", handleEnterKey);
document.getElementById("allianceInput").addEventListener("keydown", handleEnterKey);
document.getElementById("serverInput").addEventListener("keydown", handleEnterKey);

function handleLogin() {
  const nickname = document.getElementById("nicknameInput").value.trim();
  const alliance = document.getElementById("allianceInput").value.trim();
  const serverNumber = document.getElementById("serverInput").value.trim();
  if (nickname && alliance && serverNumber) {
    isLoggedIn = true;
    alert(`–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, ${nickname}! –ê–ª—å—è–Ω—Å: ${alliance}, –°–µ—Ä–≤–µ—Ä ‚Ññ${serverNumber}`);
    document.getElementById("authForm").style.display = "none";
    document.getElementById("factionSelection").style.display = "flex";
    loadStats();
    updateStatsUI(nickname, alliance, serverNumber);
  } else {
    alert("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è.");
  }
}

function handleEnterKey(event) {
  if (event.key === "Enter") {
    const inputs = [document.getElementById("nicknameInput"), document.getElementById("allianceInput"), document.getElementById("serverInput")];
    const currentIndex = inputs.indexOf(event.target);
    if (currentIndex < inputs.length - 1) {
      inputs[currentIndex + 1].focus();
    } else {
      handleLogin();
    }
  }
}

// –í—ã–±–æ—Ä —Ñ—Ä–∞–∫—Ü–∏–∏
document.querySelectorAll(".faction-selection button").forEach(button => {
  button.addEventListener("click", () => {
    console.log("–ö–Ω–æ–ø–∫–∞ –Ω–∞–∂–∞—Ç–∞:", button.getAttribute("data-faction"));
    const faction = button.getAttribute("data-faction");
    switch (faction) {
      case "fire":
        currentBulletColor = "red";
        break;
      case "ice":
        currentBulletColor = "blue";
        break;
      case "archer":
        currentBulletColor = "yellow";
        break;
      case "goblin":
        currentBulletColor = "green";
        break;
    }
    document.getElementById("factionSelection").style.display = "none";
    document.getElementById("startGameButton").style.display = "block";
    document.getElementById("startGameButton").classList.add(currentBulletColor);
  });
});

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
function updateStatsUI(nickname, alliance, serverNumber) {
  const statsDiv = document.getElementById("stats");
  statsDiv.innerHTML = `
    –ù–∏–∫: ${nickname}
    –ê–ª—å—è–Ω—Å: ${alliance}
    –°–µ—Ä–≤–µ—Ä: ‚Ññ${serverNumber}
    –¢–µ–∫—É—â–∏–π —Å—á–µ—Ç: ${score}
    –†–µ–∫–æ—Ä–¥: ${highScore}
  `;
}

// –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram
async function sendTelegramMessage(nickname, alliance, serverNumber, bestScore) {
  const message = `üèÜ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏–≥—Ä—ã:\n–ù–∏–∫: ${nickname}\n–ê–ª—å—è–Ω—Å: ${alliance}\n–°–µ—Ä–≤–µ—Ä: ‚Ññ${serverNumber}\n–ù–∞–∏–ª—É—á—à–∏–π —Å—á–µ—Ç: ${bestScore}`;
  const url = `https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/sendMessage?chat_id=${TELEGRAM_CHAT_ID}&text=${encodeURIComponent(message)}`;
  try {
    await fetch(url);
    alert("–†–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ –≥—Ä—É–ø–ø—É!");
  } catch (error) {
    alert("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.");
  }
}

// –ù–∞—á–∞–ª–æ –∏–≥—Ä—ã
document.getElementById("startGameButton").addEventListener("click", () => {
  canvas.style.display = "block";
  initGame();
  update();
  document.getElementById("startGameButton").style.display = "none";
});

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–≥—Ä—ã
function initGame() {
  snake = [];
  generateSnakePath();
  bullets = [];
  score = 0;
  isGameOver = false;
  currentSegmentIndex = 0;
  lastSegmentTime = Date.now();
}

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—É—Ç–∏ –∑–º–µ–π–∫–∏
let snakePath = [];
let currentSegmentIndex = 0;
let lastSegmentTime = 0;

function generateSnakePath() {
  const centerX = canvas.width / 2;
  const centerY = canvas.height / 2;
  let radius = Math.min(canvas.width, canvas.height) / 2 - gridSize;
  let segmentsPerCircle = [9, 8, 8, 7, 6, 6, 5];
  for (let i = 0; i < segmentsPerCircle.length; i++) {
    const segments = segmentsPerCircle[i];
    const angleStep = (2 * Math.PI) / segments;
    for (let j = 0; j < segments; j++) {
      const angle = j * angleStep;
      const x = centerX + radius * Math.cos(angle);
      const y = centerY + radius * Math.sin(angle);
      snakePath.push({ x, y });
    }
    radius -= gridSize;
  }
  for (let i = 0; i < 5; i++) {
    const x = centerX + (radius - i * gridSize) * Math.cos(0);
    const y = centerY + (radius - i * gridSize) * Math.sin(0);
    snakePath.push({ x, y });
  }
}

// –î–≤–∏–∂–µ–Ω–∏–µ –∑–º–µ–∏
function moveSnake() {
  const currentTime = Date.now();
  if (currentTime - lastSegmentTime >= 1000 && currentSegmentIndex < snakePath.length) {
    snake.unshift({ ...snakePath[currentSegmentIndex], color: colors[Math.floor(Math.random() * colors.length)] });
    currentSegmentIndex++;
    lastSegmentTime = currentTime;
  }
  if (currentSegmentIndex >= snakePath.length) {
    isGameOver = true;
    showPostGameOptions();
  }
}

// –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –∑–º–µ–∏
function drawSnake() {
  snake.forEach(segment => {
    ctx.beginPath();
    ctx.arc(segment.x, segment.y, gridSize / 2, 0, Math.PI * 2);
    ctx.fillStyle = segment.color;
    ctx.fill();
    ctx.closePath();
  });
}

// –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –∏–≥—Ä–æ–∫–∞
function drawPlayer() {
  ctx.fillStyle = "white";
  ctx.fillRect(player.x, player.y, gridSize, gridSize);
}

// –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤—ã—Å—Ç—Ä–µ–ª–∞
function drawAimLine() {
  if (isAiming) {
    ctx.strokeStyle = currentBulletColor;
    ctx.lineWidth = 2;
    ctx.beginPath();
    ctx.moveTo(player.x + gridSize / 2, player.y + gridSize / 2);
    ctx.lineTo(
      player.x + gridSize / 2 + aimDirection.x * 100,
      player.y + gridSize / 2 + aimDirection.y * 100
    );
    ctx.stroke();
  }
}

// –°—Ç—Ä–µ–ª—å–±–∞
let lastShotTime = 0;

function shootBullet(direction) {
  const bullet = {
    x: player.x,
    y: player.y,
    dx: direction.x,
    dy: direction.y,
    color: currentBulletColor
  };
  bullets.push(bullet);
}

// –û—Ç—Ä–∏—Å–æ–≤–∫–∞ —Å–Ω–∞—Ä—è–¥–æ–≤
function drawBullets() {
  bullets.forEach((bullet, index) => {
    ctx.fillStyle = bullet.color;
    ctx.fillRect(bullet.x, bullet.y, gridSize / 2, gridSize / 2);
    bullet.x += bullet.dx * 5;
    bullet.y += bullet.dy * 5;

    snake.forEach((segment, segIndex) => {
      if (
        bullet.x < segment.x + gridSize &&
        bullet.x + gridSize / 2 > segment.x &&
        bullet.y < segment.y + gridSize &&
        bullet.y + gridSize / 2 > segment.y
      ) {
        if (bullet.color === segment.color) {
          segment.color = getWeakColor(segment.color);
        } else if (isStrongerColor(bullet.color, segment.color)) {
          snake.splice(segIndex, 1);
          score++;
        } else {
          segment.color = bullet.color;
        }
        bullets.splice(index, 1);
      }
    });

    if (
      bullet.x < 0 ||
      bullet.x > canvas.width ||
      bullet.y < 0 ||
      bullet.y > canvas.height
    ) {
      bullets.splice(index, 1);
    }
  });
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ª–∞–±–æ–≥–æ —Ü–≤–µ—Ç–∞
function getWeakColor(color) {
  const colorOrder = ["red", "yellow", "green", "blue"];
  const currentIndex = colorOrder.indexOf(color);
  return colorOrder[(currentIndex + 1) % colorOrder.length];
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏–ª—ã —Ü–≤–µ—Ç–∞ (—Å–∏–Ω–∏–π > –∫—Ä–∞—Å–Ω—ã–π > –∂–µ–ª—Ç—ã–π > –∑–µ–ª–µ–Ω—ã–π > —Å–∏–Ω–∏–π)
function isStrongerColor(attacker, target) {
  const hierarchy = { blue: 'red', red: 'yellow', yellow: 'green', green: 'blue' };
  return hierarchy[attacker] === target;
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–º–µ–π–∫–∏ –ø—Ä–∏ –æ—Ç–∫–∞—Ç–µ –≥–æ–ª–æ–≤—ã
function rollbackSnake() {
  if (snake.length > 0) {
    // –£–¥–∞–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π —Å–µ–≥–º–µ–Ω—Ç –∏ —É–º–µ–Ω—å—à–∞–µ–º –∏–Ω–¥–µ–∫—Å –ø—É—Ç–∏
    snake.pop();
    currentSegmentIndex = Math.max(0, currentSegmentIndex - 1);
  }
}

// –û—Ç—Ä–∏—Å–æ–≤–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
function drawStats() {
  const statsDiv = document.getElementById("stats");
  statsDiv.innerHTML = `–†–µ–π—Ç–∏–Ω–≥: ${score} | –†–µ–∫–æ—Ä–¥: ${highScore}`;
}

// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤ localStorage
function saveStats() {
  highScore = Math.max(highScore, score);
  localStorage.setItem("highScore", highScore);
}

// –ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏–∑ localStorage
function loadStats() {
  highScore = parseInt(localStorage.getItem("highScore")) || 0;
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–≥—Ä—ã
function update() {
  if (!isLoggedIn || isGameOver) return;

  ctx.clearRect(0, 0, canvas.width, canvas.height); // –û—á–∏—â–∞–µ–º —Ö–æ–ª—Å—Ç
  moveSnake(); // –î–≤–∏–≥–∞–µ–º –∑–º–µ—é
  drawSnake(); // –û—Ç—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º –∑–º–µ—é
  drawPlayer(); // –û—Ç—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º –∏–≥—Ä–æ–∫–∞
  drawBullets(); // –û—Ç—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º —Å–Ω–∞—Ä—è–¥—ã
  drawAimLine(); // –û—Ç—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤—ã—Å—Ç—Ä–µ–ª–∞
  drawStats(); // –û—Ç—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É

  requestAnimationFrame(update); // –ó–∞–ø—É—Å–∫–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π –∫–∞–¥—Ä
}

// –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º—ã—à—å—é –∏–ª–∏ —Å–µ–Ω—Å–æ—Ä–æ–º
canvas.addEventListener("mousedown", (event) => {
  isAiming = true; // –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–∏—Ü–µ–ª–∏–≤–∞–Ω–∏–µ
});

canvas.addEventListener("mousemove", (event) => {
  if (isAiming) {
    const rect = canvas.getBoundingClientRect();
    const mouseX = event.clientX - rect.left;
    const mouseY = event.clientY - rect.top;

    // –í—ã—á–∏—Å–ª—è–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–∏—Ü–µ–ª–∏–≤–∞–Ω–∏—è
    const dx = mouseX - (player.x + gridSize / 2);
    const dy = mouseY - (player.y + gridSize / 2);
    const length = Math.sqrt(dx * dx + dy * dy);
    aimDirection = { x: dx / length, y: dy / length };
  }
});

canvas.addEventListener("mouseup", () => {
  const currentTime = Date.now();

  // –°—Ç—Ä–µ–ª—è–µ–º, –µ—Å–ª–∏ –ø—Ä–æ—à–ª–æ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≤—Ä–µ–º–µ–Ω–∏ —Å –º–æ–º–µ–Ω—Ç–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –≤—ã—Å—Ç—Ä–µ–ª–∞
  if (isAiming && currentTime - lastShotTime >= 500) {
    shootBullet(aimDirection);
    isAiming = false; // –ó–∞–∫–∞–Ω—á–∏–≤–∞–µ–º –ø—Ä–∏—Ü–µ–ª–∏–≤–∞–Ω–∏–µ
    lastShotTime = currentTime; // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –≤—ã—Å—Ç—Ä–µ–ª–∞
  }
});

// –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–µ–Ω—Å–æ—Ä–æ–º
canvas.addEventListener("touchstart", (event) => {
  isAiming = true; // –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–∏—Ü–µ–ª–∏–≤–∞–Ω–∏–µ
});

canvas.addEventListener("touchmove", (event) => {
  if (isAiming) {
    const touch = event.touches[0];
    const rect = canvas.getBoundingClientRect();
    const touchX = touch.clientX - rect.left;
    const touchY = touch.clientY - rect.top;

    // –í—ã—á–∏—Å–ª—è–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–∏—Ü–µ–ª–∏–≤–∞–Ω–∏—è
    const dx = touchX - (player.x + gridSize / 2);
    const dy = touchY - (player.y + gridSize / 2);
    const length = Math.sqrt(dx * dx + dy * dy);
    aimDirection = { x: dx / length, y: dy / length };
  }
});

canvas.addEventListener("touchend", () => {
  const currentTime = Date.now();

  // –°—Ç—Ä–µ–ª—è–µ–º, –µ—Å–ª–∏ –ø—Ä–æ—à–ª–æ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≤—Ä–µ–º–µ–Ω–∏ —Å –º–æ–º–µ–Ω—Ç–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –≤—ã—Å—Ç—Ä–µ–ª–∞
  if (isAiming && currentTime - lastShotTime >= 500) {
    shootBullet(aimDirection);
    isAiming = false; // –ó–∞–∫–∞–Ω—á–∏–≤–∞–µ–º –ø—Ä–∏—Ü–µ–ª–∏–≤–∞–Ω–∏–µ
    lastShotTime = currentTime; // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –≤—ã—Å—Ç—Ä–µ–ª–∞
  }
});

// –ü–æ–∫–∞–∑–∞—Ç—å –ø–æ—Å—Ç-–∏–≥—Ä–æ–≤—ã–µ –æ–ø—Ü–∏–∏
function showPostGameOptions() {
  document.getElementById("postGameOptions").style.display = "flex"; // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ "–ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ" –∏ "–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç"

  // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —á–µ—Ä–µ–∑ –º–∏–Ω—É—Ç—É, –µ—Å–ª–∏ –∏–≥—Ä–æ–∫ –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ—Ç
  setTimeout(() => {
    const nickname = document.getElementById("nicknameInput").value.trim();
    const alliance = document.getElementById("allianceInput").value.trim();
    const serverNumber = document.getElementById("serverInput").value.trim();
    sendTelegramMessage(nickname, alliance, serverNumber, score); // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ Telegram
    saveStats(); // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
  }, 60000); // 60 —Å–µ–∫—É–Ω–¥ (1 –º–∏–Ω—É—Ç–∞)
}

// –ö–Ω–æ–ø–∫–∞ "–ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ"
document.getElementById("restartGameButton").addEventListener("click", () => {
  document.getElementById("postGameOptions").style.display = "none"; // –°–∫—Ä—ã–≤–∞–µ–º –ø–æ—Å—Ç-–∏–≥—Ä–æ–≤—ã–µ –æ–ø—Ü–∏–∏
  initGame(); // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∏–≥—Ä—É –∑–∞–Ω–æ–≤–æ
  update(); // –ó–∞–ø—É—Å–∫–∞–µ–º –∏–≥—Ä–æ–≤–æ–π —Ü–∏–∫–ª
});

// –ö–Ω–æ–ø–∫–∞ "–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç" –≤ –ø–æ—Å—Ç-–∏–≥—Ä–æ–≤—ã—Ö –æ–ø—Ü–∏—è—Ö
document.getElementById("sendResultButtonPostGame").addEventListener("click", () => {
  const nickname = document.getElementById("nicknameInput").value.trim();
  const alliance = document.getElementById("allianceInput").value.trim();
  const serverNumber = document.getElementById("serverInput").value.trim();
  sendTelegramMessage(nickname, alliance, serverNumber, score); // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ Telegram
  saveStats(); // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
  document.getElementById("postGameOptions").style.display = "none"; // –°–∫—Ä—ã–≤–∞–µ–º –ø–æ—Å—Ç-–∏–≥—Ä–æ–≤—ã–µ –æ–ø—Ü–∏–∏
  document.getElementById("startGameButton").style.display = "block"; // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞—á–∞—Ç—å –∏–≥—Ä—É"
});
