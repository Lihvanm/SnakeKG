const canvas = document.getElementById("gameCanvas");
const ctx = canvas.getContext("2d");

// –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–≥—Ä—ã
const gridSize = 71; // –†–∞–∑–º–µ—Ä —è—á–µ–π–∫–∏ (71 –ø–∏–∫—Å–µ–ª—å)
const canvasSize = 640; // –†–∞–∑–º–µ—Ä –∏–≥—Ä–æ–≤–æ–≥–æ –ø–æ–ª—è (640x640 –ø–∏–∫—Å–µ–ª–µ–π)
const colors = ["red", "green", "blue", "yellow"]; // –¶–≤–µ—Ç–∞ —Ñ—Ä–∞–≥–º–µ–Ω—Ç–æ–≤ –∑–º–µ–∏
let snake = [];
let player = { x: canvas.width / 2, y: canvas.height / 2 }; // –ò–≥—Ä–æ–∫ –≤ —Ü–µ–Ω—Ç—Ä–µ
let bullets = [];
let score = 0;
let highScore = 0;
let isGameOver = false;
let isLoggedIn = false;

// –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤—ã—Å—Ç—Ä–µ–ª–æ–º
let isAiming = false; // –§–ª–∞–≥ –¥–ª—è –Ω–∞–≤–µ–¥–µ–Ω–∏—è —Ü–µ–ª–∏
let aimDirection = { x: 0, y: 0 }; // –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–∏—Ü–µ–ª–∏–≤–∞–Ω–∏—è
let currentBulletColor = "red"; // –¶–≤–µ—Ç —Å–Ω–∞—Ä—è–¥–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é

// Telegram Bot API
const TELEGRAM_BOT_TOKEN = "7763147422:AAGPWCetxPUsAuhvCknqVFrZId_r0BPSEhE"; // –¢–æ–∫–µ–Ω –≤–∞—à–µ–≥–æ –±–æ—Ç–∞
const TELEGRAM_CHAT_ID = "-1002382138419"; // ID –≥—Ä—É–ø–ø—ã Snake_KG

// –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
document.getElementById("loginButton").addEventListener("click", handleLogin);
document.getElementById("nicknameInput").addEventListener("keydown", handleEnterKey);
document.getElementById("allianceInput").addEventListener("keydown", handleEnterKey);
document.getElementById("serverInput").addEventListener("keydown", handleEnterKey);

function handleLogin() {
  const nickname = document.getElementById("nicknameInput").value.trim();
  const alliance = document.getElementById("allianceInput").value.trim();
  const serverNumber = document.getElementById("serverInput").value.trim();
  if (nickname && alliance && serverNumber) {
    isLoggedIn = true;
    alert(`–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, ${nickname}! –ê–ª—å—è–Ω—Å: ${alliance}, –°–µ—Ä–≤–µ—Ä ‚Ññ${serverNumber}`);
    document.getElementById("authForm").style.display = "none"; // –°–∫—Ä—ã–≤–∞–µ–º —Ñ–æ—Ä–º—É –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    document.getElementById("gameButtons").style.display = "block"; // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏
    document.getElementById("factionSelection").style.display = "flex"; // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±–æ—Ä —Ñ—Ä–∞–∫—Ü–∏–∏
    loadStats();
    updateStatsUI(nickname, alliance, serverNumber);
  } else {
    alert("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è.");
  }
}

function handleEnterKey(event) {
  if (event.key === "Enter") {
    const inputs = [document.getElementById("nicknameInput"), document.getElementById("allianceInput"), document.getElementById("serverInput")];
    const currentIndex = inputs.indexOf(event.target);
    if (currentIndex < inputs.length - 1) {
      inputs[currentIndex + 1].focus(); // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –ø–æ–ª—é
    } else {
      handleLogin(); // –ï—Å–ª–∏ —ç—Ç–æ –ø–æ—Å–ª–µ–¥–Ω–µ–µ –ø–æ–ª–µ, –≤—ã–ø–æ–ª–Ω—è–µ–º –≤—Ö–æ–¥
    }
  }
}

// –í—ã–±–æ—Ä —Ñ—Ä–∞–∫—Ü–∏–∏
document.querySelectorAll(".faction-selection button").forEach(button => {
  button.addEventListener("click", () => {
    const faction = button.getAttribute("data-faction");
    switch (faction) {
      case "fire":
        currentBulletColor = "red";
        break;
      case "ice":
        currentBulletColor = "blue";
        break;
      case "archer":
        currentBulletColor = "yellow";
        break;
      case "goblin":
        currentBulletColor = "green";
        break;
    }
    document.getElementById("factionSelection").style.display = "none";
    document.getElementById("startGameButton").style.display = "block";
  });
});

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
function updateStatsUI(nickname, alliance, serverNumber) {
  const statsDiv = document.getElementById("stats");
  statsDiv.innerHTML = `
    –ù–∏–∫: ${nickname}
    –ê–ª—å—è–Ω—Å: ${alliance}
    –°–µ—Ä–≤–µ—Ä: ‚Ññ${serverNumber}
    –¢–µ–∫—É—â–∏–π —Å—á–µ—Ç: ${score}
    –†–µ–∫–æ—Ä–¥: ${highScore}
  `;
}

// –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram
async function sendTelegramMessage(nickname, alliance, serverNumber, bestScore) {
  const message = `üèÜ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏–≥—Ä—ã:\n–ù–∏–∫: ${nickname}\n–ê–ª—å—è–Ω—Å: ${alliance}\n–°–µ—Ä–≤–µ—Ä: ‚Ññ${serverNumber}\n–ù–∞–∏–ª—É—á—à–∏–π —Å—á–µ—Ç: ${bestScore}`;
  const url = `https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/sendMessage?chat_id=${TELEGRAM_CHAT_ID}&text=${encodeURIComponent(message)}`;
  try {
    await fetch(url);
    console.log("–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram!");
    alert("–†–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ –≥—Ä—É–ø–ø—É!");
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram:", error);
    alert("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.");
  }
}

// –ù–∞—á–∞–ª–æ –∏–≥—Ä—ã
document.getElementById("startGameButton").addEventListener("click", () => {
  canvas.style.display = "block"; // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ö–æ–ª—Å—Ç
  initGame();
  update();
  document.getElementById("startGameButton").style.display = "none";
  document.getElementById("sendResultButton").style.display = "none";
});

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–≥—Ä—ã
function initGame() {
  snake = [];
  generateSnakePath();
  bullets = [];
  score = 0;
  isGameOver = false;
  currentSegmentIndex = 0;
  lastSegmentTime = Date.now();
}

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—É—Ç–∏ –∑–º–µ–π–∫–∏
let snakePath = [];
let currentSegmentIndex = 0;
let lastSegmentTime = 0;

function generateSnakePath() {
  let x = canvasSize - gridSize / 2; // –ù–∞—á–∞–ª—å–Ω–∞—è —Ç–æ—á–∫–∞ (–ø—Ä–∞–≤—ã–π –≤–µ—Ä—Ö–Ω–∏–π —É–≥–æ–ª)
  let y = gridSize / 2;
  let direction = "left"; // –ù–∞—á–∞–ª—å–Ω–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–≤–∏–∂–µ–Ω–∏—è
  let steps = 8; // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —à–∞–≥–æ–≤ –≤ —Ç–µ–∫—É—â–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–∏
  let stepCount = 0; // –°—á–µ—Ç—á–∏–∫ —à–∞–≥–æ–≤
  while (snakePath.length < 81) {
    snakePath.push({ x: x, y: y });
    if (direction === "left") {
      x -= gridSize;
    } else if (direction === "down") {
      y += gridSize;
    } else if (direction === "right") {
      x += gridSize;
    } else if (direction === "up") {
      y -= gridSize;
    }
    stepCount++;
    if (stepCount === steps) {
      stepCount = 0;
      if (direction === "left") {
        direction = "down";
      } else if (direction === "down") {
        direction = "right";
        steps--; // –£–º–µ–Ω—å—à–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —à–∞–≥–æ–≤ –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –∫—Ä—É–≥–∞
      } else if (direction === "right") {
        direction = "up";
      } else if (direction === "up") {
        direction = "left";
        steps--; // –£–º–µ–Ω—å—à–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —à–∞–≥–æ–≤ –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –∫—Ä—É–≥–∞
      }
    }
  }
}

// –î–≤–∏–∂–µ–Ω–∏–µ –∑–º–µ–∏
function moveSnake() {
  const currentTime = Date.now();
  if (currentTime - lastSegmentTime >= 1000 && currentSegmentIndex < snakePath.length) {
    const newSegment = { ...snakePath[currentSegmentIndex], color: colors[Math.floor(Math.random() * colors.length)] };
    snake.unshift(newSegment);
    currentSegmentIndex++;
    lastSegmentTime = currentTime;
  }
  if (currentSegmentIndex >= snakePath.length) {
    isGameOver = true;
    showPostGameOptions();
    return;
  }
}

// –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –∑–º–µ–∏
function drawSnake() {
  snake.forEach((segment, index) => {
    ctx.beginPath();
    ctx.arc(segment.x, segment.y, gridSize / 2, 0, Math.PI * 2); // –†–∏—Å—É–µ–º –∫—Ä—É–≥–ª—ã–µ —Å–µ–≥–º–µ–Ω—Ç—ã
    ctx.fillStyle = segment.color;
    ctx.fill();
    ctx.closePath();
  });
}

// –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –∏–≥—Ä–æ–∫–∞
function drawPlayer() {
  ctx.fillStyle = "white";
  ctx.fillRect(player.x, player.y, gridSize, gridSize);
}

// –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤—ã—Å—Ç—Ä–µ–ª–∞
function drawAimLine() {
  if (isAiming) {
    ctx.strokeStyle = currentBulletColor;
    ctx.lineWidth = 2;
    ctx.beginPath();
    ctx.moveTo(player.x + gridSize / 2, player.y + gridSize / 2);
    ctx.lineTo(
      player.x + gridSize / 2 + aimDirection.x * 100,
      player.y + gridSize / 2 + aimDirection.y * 100
    );
    ctx.stroke();
  }
}

// –°—Ç—Ä–µ–ª—å–±–∞
let lastShotTime = 0; // –í—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –≤—ã—Å—Ç—Ä–µ–ª–∞

function shootBullet(direction) {
  const bullet = {
    x: player.x,
    y: player.y,
    dx: direction.x,
    dy: direction.y,
    color: currentBulletColor
  };
  bullets.push(bullet);
}

// –û—Ç—Ä–∏—Å–æ–≤–∫–∞ —Å–Ω–∞—Ä—è–¥–æ–≤
function drawBullets() {
  bullets.forEach((bullet, index) => {
    ctx.fillStyle = bullet.color;
    ctx.fillRect(bullet.x, bullet.y, gridSize / 2, gridSize / 2);
    // –ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ —Å–Ω–∞—Ä—è–¥–∞
    bullet.x += bullet.dx * 5;
    bullet.y += bullet.dy * 5;
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–æ–ª–∫–Ω–æ–≤–µ–Ω–∏–π
    snake.forEach((segment, segIndex) => {
      if (
        bullet.x < segment.x + gridSize &&
