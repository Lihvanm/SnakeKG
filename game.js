const canvas = document.getElementById("gameCanvas");
const ctx = canvas.getContext("2d");

// –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–≥—Ä—ã
const gridSize = 20; // –†–∞–∑–º–µ—Ä –∫–ª–µ—Ç–∫–∏
const colors = ["red", "green", "blue", "yellow"]; // –¶–≤–µ—Ç–∞ —Ñ—Ä–∞–≥–º–µ–Ω—Ç–æ–≤ –∑–º–µ–∏
let snake = [];
let player = { x: canvas.width / 2, y: canvas.height / 2 }; // –ò–≥—Ä–æ–∫ –≤ —Ü–µ–Ω—Ç—Ä–µ
let bullets = [];
let score = 0;
let highScore = 0;
let isGameOver = false;
let isLoggedIn = false;

// –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤—ã—Å—Ç—Ä–µ–ª–æ–º
let isAiming = false; // –§–ª–∞–≥ –¥–ª—è –Ω–∞–≤–µ–¥–µ–Ω–∏—è —Ü–µ–ª–∏
let aimDirection = { x: 0, y: 0 }; // –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–∏—Ü–µ–ª–∏–≤–∞–Ω–∏—è
let currentBulletColor = "red"; // –¶–≤–µ—Ç —Å–Ω–∞—Ä—è–¥–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é

// Telegram Bot API
const TELEGRAM_BOT_TOKEN = "7763147422:AAGPWCetxPUsAuhvCknqVFrZId_r0BPSEhE"; // –¢–æ–∫–µ–Ω –≤–∞—à–µ–≥–æ –±–æ—Ç–∞
const TELEGRAM_CHAT_ID = "-1002382138419"; // ID –≥—Ä—É–ø–ø—ã Snake_KG

// –í—ã–±–æ—Ä —Ñ—Ä–∞–∫—Ü–∏–∏
document.querySelectorAll(".faction-selection button").forEach(button => {
  button.addEventListener("click", () => {
    const faction = button.getAttribute("data-faction");
    switch (faction) {
      case "fire":
        currentBulletColor = "red";
        break;
      case "ice":
        currentBulletColor = "blue";
        break;
      case "archer":
        currentBulletColor = "yellow";
        break;
      case "goblin":
        currentBulletColor = "green";
        break;
    }
    document.getElementById("factionSelection").style.display = "none";
    document.getElementById("startGameButton").style.display = "block";
  });
});

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
function updateStatsUI(nickname, alliance, serverNumber) {
  const statsDiv = document.getElementById("stats");
  statsDiv.innerHTML = `
    –ù–∏–∫: ${nickname}
    –ê–ª—å—è–Ω—Å: ${alliance}
    –°–µ—Ä–≤–µ—Ä: ‚Ññ${serverNumber}
    –¢–µ–∫—É—â–∏–π —Å—á–µ—Ç: ${score}
    –†–µ–∫–æ—Ä–¥: ${highScore}
  `;
}

// –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram
async function sendTelegramMessage(nickname, alliance, serverNumber, bestScore) {
  const message = `üèÜ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏–≥—Ä—ã:\n–ù–∏–∫: ${nickname}\n–ê–ª—å—è–Ω—Å: ${alliance}\n–°–µ—Ä–≤–µ—Ä: ‚Ññ${serverNumber}\n–ù–∞–∏–ª—É—á—à–∏–π —Å—á–µ—Ç: ${bestScore}`;
  const url = `https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/sendMessage?chat_id=${TELEGRAM_CHAT_ID}&text=${encodeURIComponent(message)}`;
  try {
    await fetch(url);
    console.log("–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram!");
    alert("–†–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ –≥—Ä—É–ø–ø—É!");
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram:", error);
    alert("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.");
  }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–≥—Ä—ã
function initGame() {
  snake = [];
  generateSnakePath();
  bullets = [];
  score = 0;
  isGameOver = false;
  currentSegmentIndex = 0;
  lastSegmentTime = Date.now();
}

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—É—Ç–∏ –∑–º–µ–π–∫–∏
let snakePath = [];
let currentSegmentIndex = 0;
let lastSegmentTime = 0;

function generateSnakePath() {
  const centerX = canvas.width / 2;
  const centerY = canvas.height / 2;
  let radius = Math.min(canvas.width, canvas.height) / 2 - gridSize; // –ù–∞—á–∞–ª—å–Ω—ã–π —Ä–∞–¥–∏—É—Å
  let segmentsPerCircle = [9, 8, 8, 7, 6, 6, 5]; // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–µ–≥–º–µ–Ω—Ç–æ–≤ –Ω–∞ –∫–∞–∂–¥—ã–π –∫—Ä—É–≥
  for (let i = 0; i < segmentsPerCircle.length; i++) {
    const segments = segmentsPerCircle[i];
    const angleStep = (2 * Math.PI) / segments;
    for (let j = 0; j < segments; j++) {
      const angle = j * angleStep;
      const x = centerX + radius * Math.cos(angle);
      const y = centerY + radius * Math.sin(angle);
      snakePath.push({ x: x, y: y });
    }
    radius -= gridSize; // –£–º–µ–Ω—å—à–∞–µ–º —Ä–∞–¥–∏—É—Å –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –∫—Ä—É–≥–∞
  }
  // –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–µ —à–∞–≥–∏ –∫ —Ü–µ–Ω—Ç—Ä—É
  for (let i = 0; i < 5; i++) {
    const x = centerX + (radius - i * gridSize) * Math.cos(0);
    const y = centerY + (radius - i * gridSize) * Math.sin(0);
    snakePath.push({ x: x, y: y });
  }
}

// –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –∑–º–µ–∏
function drawSnake() {
  snake.forEach(segment => {
    ctx.beginPath();
    ctx.arc(segment.x, segment.y, gridSize / 2, 0, Math.PI * 2);
    ctx.fillStyle = segment.color;
    ctx.fill();
    ctx.closePath();
  });
}

// –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –∏–≥—Ä–æ–∫–∞
function drawPlayer() {
  ctx.fillStyle = "white";
  ctx.fillRect(player.x, player.y, gridSize, gridSize);
}

// –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤—ã—Å—Ç—Ä–µ–ª–∞
function drawAimLine() {
  if (isAiming) {
    ctx.strokeStyle = currentBulletColor;
    ctx.lineWidth = 2;
    ctx.beginPath();
    ctx.moveTo(player.x + gridSize / 2, player.y + gridSize / 2);
    ctx.lineTo(
      player.x + gridSize / 2 + aimDirection.x * 100,
      player.y + gridSize / 2 + aimDirection.y * 100
    );
    ctx.stroke();
  }
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–≥—Ä—ã
function update() {
  if (!isLoggedIn || isGameOver) return;
  ctx.clearRect(0, 0, canvas.width, canvas.height);
  moveSnake();
  drawSnake();
  drawPlayer();
  drawBullets();
  drawAimLine();
  requestAnimationFrame(update);
}

// –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º—ã—à—å—é –∏–ª–∏ —Å–µ–Ω—Å–æ—Ä–æ–º
canvas.addEventListener("mousedown", () => isAiming = true);
canvas.addEventListener("mousemove", handleMouseMove);
canvas.addEventListener("mouseup", handleMouseUp);

function handleMouseMove(event) {
  if (isAiming) {
    const rect = canvas.getBoundingClientRect();
    const mouseX = event.clientX - rect.left;
    const mouseY = event.clientY - rect.top;
    const dx = mouseX - (player.x + gridSize / 2);
    const dy = mouseY - (player.y + gridSize / 2);
    const length = Math.sqrt(dx * dx + dy * dy);
    aimDirection = { x: dx / length, y: dy / length };
  }
}

function handleMouseUp() {
  const currentTime = Date.now();
  if (isAiming && currentTime - lastShotTime >= 500) {
    shootBullet(aimDirection);
    isAiming = false;
    lastShotTime = currentTime;
  }
}

// –ü–æ–∫–∞–∑–∞—Ç—å –ø–æ—Å—Ç-–∏–≥—Ä–æ–≤—ã–µ –æ–ø—Ü–∏–∏
function showPostGameOptions() {
  document.getElementById("postGameOptions").style.display = "flex";
}
