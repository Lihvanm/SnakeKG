const canvas = document.getElementById("gameCanvas");
const ctx = canvas.getContext("2d");

// –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–≥—Ä—ã
const gridSize = 20; // –†–∞–∑–º–µ—Ä –∫–ª–µ—Ç–∫–∏
const colors = ["red", "green", "blue", "yellow"]; // –¶–≤–µ—Ç–∞ —Ñ—Ä–∞–≥–º–µ–Ω—Ç–æ–≤ –∑–º–µ–∏
let snake = [];
let player = { x: canvas.width / 2, y: canvas.height / 2 }; // –ò–≥—Ä–æ–∫ –≤ —Ü–µ–Ω—Ç—Ä–µ
let bullets = [];
let score = 0;
let highScore = 0;
let isGameOver = false;
let isLoggedIn = false;

// –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤—ã—Å—Ç—Ä–µ–ª–æ–º
let isAiming = false; // –§–ª–∞–≥ –¥–ª—è –Ω–∞–≤–µ–¥–µ–Ω–∏—è —Ü–µ–ª–∏
let aimDirection = { x: 0, y: 0 }; // –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–∏—Ü–µ–ª–∏–≤–∞–Ω–∏—è
let currentBulletColor = "red"; // –¶–≤–µ—Ç —Å–Ω–∞—Ä—è–¥–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é

// Telegram Bot API
const TELEGRAM_BOT_TOKEN = "7763147422:AAGPWCetxPUsAuhvCknqVFrZId_r0BPSEhE"; // –¢–æ–∫–µ–Ω –≤–∞—à–µ–≥–æ –±–æ—Ç–∞
const TELEGRAM_CHAT_ID = "-1002382138419"; // ID –≥—Ä—É–ø–ø—ã Snake_KG

// –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
document.getElementById("loginButton").addEventListener("click", () => {
  const nickname = document.getElementById("nicknameInput").value;
  const alliance = document.getElementById("allianceInput").value;
  const serverNumber = document.getElementById("serverInput").value;

  if (nickname && alliance && serverNumber) {
    isLoggedIn = true;
    alert(`–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, ${nickname}! –ê–ª—å—è–Ω—Å: ${alliance}, –°–µ—Ä–≤–µ—Ä ‚Ññ${serverNumber}`);
    document.getElementById("authForm").style.display = "none"; // –°–∫—Ä—ã–≤–∞–µ–º —Ñ–æ—Ä–º—É –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    document.getElementById("gameButtons").style.display = "block"; // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏
    document.getElementById("factionSelection").style.display = "flex"; // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±–æ—Ä —Ñ—Ä–∞–∫—Ü–∏–∏
    loadStats();
    updateStatsUI(nickname, alliance, serverNumber);
  } else {
    alert("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è.");
  }
});

// –í—ã–±–æ—Ä —Ñ—Ä–∞–∫—Ü–∏–∏
document.querySelectorAll(".faction-selection button").forEach(button => {
  button.addEventListener("click", () => {
    const faction = button.getAttribute("data-faction");
    switch (faction) {
      case "fire":
        currentBulletColor = "red";
        break;
      case "ice":
        currentBulletColor = "blue";
        break;
      case "archer":
        currentBulletColor = "yellow";
        break;
      case "goblin":
        currentBulletColor = "green";
        break;
    }
    document.getElementById("factionSelection").style.display = "none";
    document.getElementById("startGameButton").style.display = "block";
  });
});

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
function updateStatsUI(nickname, alliance, serverNumber) {
  const statsDiv = document.getElementById("stats");
  statsDiv.innerHTML = `
    <p>–ù–∏–∫: ${nickname}</p>
    <p>–ê–ª—å—è–Ω—Å: ${alliance}</p>
    <p>–°–µ—Ä–≤–µ—Ä: ‚Ññ${serverNumber}</p>
    <p>–¢–µ–∫—É—â–∏–π —Å—á–µ—Ç: ${score}</p>
    <p>–†–µ–∫–æ—Ä–¥: ${highScore}</p>
  `;
}

// –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram
async function sendTelegramMessage(nickname, alliance, serverNumber, bestScore) {
  const message = `üèÜ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏–≥—Ä—ã:\n–ù–∏–∫: ${nickname}\n–ê–ª—å—è–Ω—Å: ${alliance}\n–°–µ—Ä–≤–µ—Ä: ‚Ññ${serverNumber}\n–ù–∞–∏–ª—É—á—à–∏–π —Å—á–µ—Ç: ${bestScore}`;
  const url = `https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/sendMessage?chat_id=${TELEGRAM_CHAT_ID}&text=${encodeURIComponent(message)}`;
  try {
    await fetch(url);
    console.log("–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram!");
    alert("–†–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ –≥—Ä—É–ø–ø—É!");
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram:", error);
    alert("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.");
  }
}

// –ù–∞—á–∞–ª–æ –∏–≥—Ä—ã
document.getElementById("startGameButton").addEventListener("click", () => {
  document.getElementById("videoContainer").style.display = "none"; // –°–∫—Ä—ã–≤–∞–µ–º –≤–∏–¥–µ–æ
  canvas.style.display = "block"; // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ö–æ–ª—Å—Ç
  initGame();
  update();
  document.getElementById("startGameButton").style.display = "none";
  document.getElementById("sendResultButton").style.display = "none";
});

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–≥—Ä—ã
function initGame() {
  snake = [];
  generateSnakePath();
  bullets = [];
  score = 0;
  isGameOver = false;
  currentSegmentIndex = 0;
  lastSegmentTime = Date.now();
}

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—É—Ç–∏ –∑–º–µ–π–∫–∏
let snakePath = [];
let currentSegmentIndex = 0;
let lastSegmentTime = 0;

function generateSnakePath() {
  const centerX = canvas.width / 2;
  const centerY = canvas.height / 2;
  let radius = Math.min(canvas.width, canvas.height) / 2 - gridSize; // –ù–∞—á–∞–ª—å–Ω—ã–π —Ä–∞–¥–∏—É—Å
  let segmentsPerCircle = [9, 8, 8, 7, 6, 6, 5]; // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–µ–≥–º–µ–Ω—Ç–æ–≤ –Ω–∞ –∫–∞–∂–¥—ã–π –∫—Ä—É–≥

  for (let i = 0; i < segmentsPerCircle.length; i++) {
    const segments = segmentsPerCircle[i];
    const angleStep = (2 * Math.PI) / segments;

    for (let j = 0; j < segments; j++) {
      const angle = j * angleStep;
      const x = centerX + radius * Math.cos(angle);
      const y = centerY + radius * Math.sin(angle);
      snakePath.push({ x: x, y: y });
    }

    radius -= gridSize; // –£–º–µ–Ω—å—à–∞–µ–º —Ä–∞–¥–∏—É—Å –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –∫—Ä—É–≥–∞
  }

  // –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–µ —à–∞–≥–∏ –∫ —Ü–µ–Ω—Ç—Ä—É
  for (let i = 0; i < 5; i++) {
    const x = centerX + (radius - i * gridSize) * Math.cos(0);
    const y = centerY + (radius - i * gridSize) * Math.sin(0);
    snakePath.push({ x: x, y: y });
  }
}

// –î–≤–∏–∂–µ–Ω–∏–µ –∑–º–µ–∏
function moveSnake() {
  const currentTime = Date.now();

  // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π —Å–µ–≥–º–µ–Ω—Ç –∫–∞–∂–¥—É—é —Å–µ–∫—É–Ω–¥—É
  if (currentTime - lastSegmentTime >= 1000 && currentSegmentIndex < snakePath.length) {
    snake.unshift({ ...snakePath[currentSegmentIndex], color: colors[Math.floor(Math.random() * colors.length)] });
    currentSegmentIndex++;
    lastSegmentTime = currentTime;
  }

  // –ï—Å–ª–∏ –∑–º–µ–π–∫–∞ –¥–æ—Å—Ç–∏–≥–ª–∞ –∫–æ–Ω—Ü–∞ –ø—É—Ç–∏
  if (currentSegmentIndex >= snakePath.length) {
    isGameOver = true;
    alert("Game Over! Your score: " + score);
    document.getElementById("sendResultButton").style.display = "block";
    return;
  }
}

// –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –∑–º–µ–∏
function drawSnake() {
  snake.forEach((segment, index) => {
    ctx.beginPath();
    ctx.arc(segment.x, segment.y, gridSize / 3, 0, Math.PI * 2); // –†–∏—Å—É–µ–º –∫—Ä—É–≥–ª—ã–µ —Å–µ–≥–º–µ–Ω—Ç—ã
    ctx.fillStyle
