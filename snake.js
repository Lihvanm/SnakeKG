const canvas = document.getElementById("gameCanvas");
const ctx = canvas.getContext("2d");

// –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–≥—Ä—ã
const gridSize = 20; // –†–∞–∑–º–µ—Ä –∫–ª–µ—Ç–∫–∏
const colors = ["red", "green", "blue", "yellow"]; // –¶–≤–µ—Ç–∞ —Ñ—Ä–∞–≥–º–µ–Ω—Ç–æ–≤ –∑–º–µ–∏
let snake = [];
let player = { x: canvas.width / 2, y: canvas.height / 2 }; // –ò–≥—Ä–æ–∫ –≤ —Ü–µ–Ω—Ç—Ä–µ
let bullets = [];
let score = 0;
let highScore = 0;
let isGameOver = false;
let isLoggedIn = false;

// –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤—ã—Å—Ç—Ä–µ–ª–æ–º
let isAiming = false; // –§–ª–∞–≥ –¥–ª—è –Ω–∞–≤–µ–¥–µ–Ω–∏—è —Ü–µ–ª–∏
let aimDirection = { x: 0, y: 0 }; // –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–∏—Ü–µ–ª–∏–≤–∞–Ω–∏—è
let currentBulletColor = colors[Math.floor(Math.random() * colors.length)];

// Telegram Bot API
const TELEGRAM_BOT_TOKEN = "7763147422:AAGPWCetxPUsAuhvCknqVFrZId_r0BPSEhE"; // –¢–æ–∫–µ–Ω –≤–∞—à–µ–≥–æ –±–æ—Ç–∞
const TELEGRAM_CHAT_ID = "-1002382138419"; // ID –≥—Ä—É–ø–ø—ã Snake_KG

// –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
document.getElementById("loginButton").addEventListener("click", () => {
  const alliance = document.getElementById("allianceInput").value;
  const serverNumber = document.getElementById("serverInput").value;
  if (alliance && serverNumber) {
    isLoggedIn = true;
    alert(`–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, ${alliance}! –°–µ—Ä–≤–µ—Ä ‚Ññ${serverNumber}`);
    document.getElementById("authForm").style.display = "none"; // –°–∫—Ä—ã–≤–∞–µ–º —Ñ–æ—Ä–º—É –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    loadStats();
    updateStatsUI(alliance, serverNumber);
    document.getElementById("startGameButton").style.display = "block";
  } else {
    alert("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è.");
  }
});

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
function updateStatsUI(alliance, serverNumber) {
  const statsDiv = document.getElementById("stats");
  statsDiv.innerHTML = `
    <p>–ê–ª—å—è–Ω—Å: ${alliance}</p>
    <p>–°–µ—Ä–≤–µ—Ä: ‚Ññ${serverNumber}</p>
    <p>–¢–µ–∫—É—â–∏–π —Å—á–µ—Ç: ${score}</p>
    <p>–†–µ–∫–æ—Ä–¥: ${highScore}</p>
  `;
}

// –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram
async function sendTelegramMessage(alliance, serverNumber, bestScore) {
  const message = `üèÜ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏–≥—Ä—ã:\n–ê–ª—å—è–Ω—Å: ${alliance}\n–°–µ—Ä–≤–µ—Ä: ‚Ññ${serverNumber}\n–ù–∞–∏–ª—É—á—à–∏–π —Å—á–µ—Ç: ${bestScore}`;
  const url = `https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/sendMessage?chat_id=${TELEGRAM_CHAT_ID}&text=${encodeURIComponent(message)}`;
  try {
    await fetch(url);
    console.log("–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram!");
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram:", error);
  }
}

// –ù–∞—á–∞–ª–æ –∏–≥—Ä—ã
document.getElementById("startGameButton").addEventListener("click", () => {
  document.getElementById("videoContainer").style.display = "none"; // –°–∫—Ä—ã–≤–∞–µ–º –≤–∏–¥–µ–æ
  canvas.style.display = "block"; // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ö–æ–ª—Å—Ç
  initGame();
  update();
  document.getElementById("startGameButton").style.display = "none";
});

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–≥—Ä—ã
function initGame() {
  snake = [{ x: canvas.width - gridSize, y: 0, color: colors[Math.floor(Math.random() * colors.length)] }]; // –ù–∞—á–∞–ª—å–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è –∑–º–µ–∏
  bullets = [];
  score = 0;
  isGameOver = false;
}

// –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –∑–º–µ–∏
function drawSnake() {
  snake.forEach((segment, index) => {
    ctx.beginPath();
    ctx.arc(segment.x + gridSize / 2, segment.y + gridSize / 2, gridSize / 3, 0, Math.PI * 2); // –†–∏—Å—É–µ–º –∫—Ä—É–≥–ª—ã–µ —Å–µ–≥–º–µ–Ω—Ç—ã
    ctx.fillStyle = segment.color;
    ctx.fill();
    ctx.closePath();
  });
}

// –î–≤–∏–∂–µ–Ω–∏–µ –∑–º–µ–∏
let angle = 0; // –£–≥–æ–ª –¥–ª—è –¥–≤–∏–∂–µ–Ω–∏—è –ø–æ –∫—Ä—É–≥—É
let radius = Math.max(canvas.width, canvas.height) / 2 - gridSize; // –ù–∞—á–∞–ª—å–Ω—ã–π —Ä–∞–¥–∏—É—Å
function moveSnake() {
  const centerX = canvas.width / 2;
  const centerY = canvas.height / 2;

  // –í—ã—á–∏—Å–ª—è–µ–º –Ω–æ–≤—É—é –ø–æ–∑–∏—Ü–∏—é –≥–æ–ª–æ–≤—ã –∑–º–µ–∏
  const headX = centerX + radius * Math.cos(angle);
  const headY = centerY + radius * Math.sin(angle);

  // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –≥–æ–ª–æ–≤—É
  snake.unshift({ x: headX, y: headY, color: colors[Math.floor(Math.random() * colors.length)] });

  // –£–º–µ–Ω—å—à–∞–µ–º —Ä–∞–¥–∏—É—Å –¥–ª—è —Å—É–∂–µ–Ω–∏—è —Å–ø–∏—Ä–∞–ª–∏
  radius -= 0.05; // –ú–µ–¥–ª–µ–Ω–Ω–æ–µ —Å—É–∂–µ–Ω–∏–µ

  // –£–¥–∞–ª—è–µ–º —Ö–≤–æ—Å—Ç, –µ—Å–ª–∏ –∑–º–µ—è —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–∞—è
  if (snake.length > 100) {
    snake.pop();
  }

  // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —É–≥–æ–ª –¥–ª—è –¥–≤–∏–∂–µ–Ω–∏—è –ø–æ —Å–ø–∏—Ä–∞–ª–∏
  angle += 0.02; // –£–≥–æ–ª —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç—Å—è –º–µ–¥–ª–µ–Ω–Ω–æ
}

// –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –∏–≥—Ä–æ–∫–∞
function drawPlayer() {
  ctx.fillStyle = "white";
  ctx.fillRect(player.x, player.y, gridSize, gridSize);
}

// –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤—ã—Å—Ç—Ä–µ–ª–∞
function drawAimLine() {
  if (isAiming) {
    ctx.strokeStyle = currentBulletColor;
    ctx.lineWidth = 2;
    ctx.beginPath();
    ctx.moveTo(player.x + gridSize / 2, player.y + gridSize / 2);
    ctx.lineTo(
      player.x + gridSize / 2 + aimDirection.x * 100,
      player.y + gridSize / 2 + aimDirection.y * 100
    );
    ctx.stroke();
  }
}

// –°—Ç—Ä–µ–ª—å–±–∞
function shootBullet(direction) {
  const bullet = {
    x: player.x,
    y: player.y,
    dx: direction.x,
    dy: direction.y,
    color: currentBulletColor
  };
  bullets.push(bullet);
}

// –û—Ç—Ä–∏—Å–æ–≤–∫–∞ —Å–Ω–∞—Ä—è–¥–æ–≤
function drawBullets() {
  bullets.forEach((bullet, index) => {
    ctx.fillStyle = bullet.color;
    ctx.fillRect(bullet.x, bullet.y, gridSize / 2, gridSize / 2);

    // –ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ —Å–Ω–∞—Ä—è–¥–∞
    bullet.x += bullet.dx * 5;
    bullet.y += bullet.dy * 5;

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–æ–ª–∫–Ω–æ–≤–µ–Ω–∏–π
    snake.forEach((segment, segIndex) => {
      if (
        bullet.x < segment.x + gridSize &&
        bullet.x + gridSize / 2 > segment.x &&
        bullet.y < segment.y + gridSize &&
        bullet.y + gridSize / 2 > segment.y
      ) {
        if (bullet.color === segment.color) {
          snake.splice(segIndex, 1); // –£–Ω–∏—á—Ç–æ–∂–µ–Ω–∏–µ —Ñ—Ä–∞–≥–º–µ–Ω—Ç–∞
          bullets.splice(index, 1); // –£–¥–∞–ª–µ–Ω–∏–µ —Å–Ω–∞—Ä—è–¥–∞
          score++;
        } else {
          segment.color = bullet.color; // –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–≤–µ—Ç–∞ —Ñ—Ä–∞–≥–º–µ–Ω—Ç–∞
          bullets.splice(index, 1); // –£–¥–∞–ª–µ–Ω–∏–µ —Å–Ω–∞—Ä—è–¥–∞
        }
      }
    });

    // –£–¥–∞–ª–µ–Ω–∏–µ —Å–Ω–∞—Ä—è–¥–∞ –∑–∞ –ø—Ä–µ–¥–µ–ª–∞–º–∏ —ç–∫—Ä–∞–Ω–∞
    if (
      bullet.x < 0 ||
      bullet.x > canvas.width ||
      bullet.y < 0 ||
      bullet.y > canvas.height
    ) {
      bullets.splice(index, 1);
    }
  });
}

// –û—Ç—Ä–∏—Å–æ–≤–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
function drawStats() {
  const statsDiv = document.getElementById("stats");
  statsDiv.innerHTML = `–†–µ–π—Ç–∏–Ω–≥: ${score} | –†–µ–∫–æ—Ä–¥: ${highScore}`;
}

// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤ localStorage
function saveStats() {
  highScore = Math.max(highScore, score);
  localStorage.setItem("highScore", highScore);
}

// –ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏–∑ localStorage
function loadStats() {
  highScore = parseInt(localStorage.getItem("highScore")) || 0;
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–≥—Ä—ã
function update() {
  if (!isLoggedIn || isGameOver) return;

  ctx.clearRect(0, 0, canvas.width, canvas.height);

  moveSnake();
  drawSnake();
  drawPlayer();
  drawBullets();
  drawAimLine(); // –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤—ã—Å—Ç—Ä–µ–ª–∞
  drawStats();

  requestAnimationFrame(update);
}

// –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º—ã—à—å—é –∏–ª–∏ —Å–µ–Ω—Å–æ—Ä–æ–º
canvas.addEventListener("mousedown", (event) => {
  isAiming = true;
});
canvas.addEventListener("mousemove", (event) => {
  if (isAiming) {
    const rect = canvas.getBoundingClientRect();
    const mouseX = event.clientX - rect.left;
    const mouseY = event.clientY - rect.top;
    const dx = mouseX - (player.x + gridSize / 2);
    const dy = mouseY - (player.y + gridSize / 2);
    const length = Math.sqrt(dx * dx + dy * dy);
    aimDirection = { x: dx / length, y: dy / length };
  }
});
canvas.addEventListener("mouseup", () => {
  if (isAiming) {
    shootBullet(aimDirection);
    isAiming = false;
  }
});

// –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–µ–Ω—Å–æ—Ä–æ–º
canvas.addEventListener("touchstart", (event) => {
  isAiming = true;
});
canvas.addEventListener("touchmove", (event) => {
  if (isAiming) {
    const touch = event.touches[0];
    const rect = canvas.getBoundingClientRect();
    const touchX = touch.clientX - rect.left;
    const touchY = touch.clientY - rect.top;
    const dx = touchX - (player.x + gridSize / 2);
    const dy = touchY - (player.y + gridSize / 2);
    const length = Math.sqrt(dx * dx + dy * dy);
    aimDirection = { x: dx / length, y: dy / length };
  }
});
canvas.addEventListener("touchend", () => {
  if (isAiming) {
    shootBullet(aimDirection);
    isAiming = false;
  }
});

// –ö–æ–Ω–µ—Ü –∏–≥—Ä—ã
function endGame(alliance, serverNumber) {
  isGameOver = true;
  saveStats();
  alert("Game Over! Your score: " + score);
  sendTelegramMessage(alliance, serverNumber, score); // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ Telegram
  document.getElementById("startGameButton").style.display = "block";
}
